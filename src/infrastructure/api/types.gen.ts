// This file is auto-generated by @hey-api/openapi-ts

export type ToolRequest = {
  name: string
  description?: string
  category: string
  conditionStatus: string
  quantityAvailable: number
}

export type ToolResponse = {
  id?: bigint
  name?: string
  description?: string
  category?: string
  conditionStatus?: string
  quantityAvailable?: number
  imageUrls?: Array<string>
}

export type CustomUserDetails = {
  id?: bigint
  password?: string
  role?: 'MEMBER' | 'ADMIN' | 'USER' | 'ORG_ADMIN' | 'STAFF'
  mfaEnabled?: boolean
  organizationId?: bigint
  enabled?: boolean
  accountNonExpired?: boolean
  credentialsNonExpired?: boolean
  authorities?: Array<GrantedAuthority>
  username?: string
  accountNonLocked?: boolean
}

export type GrantedAuthority = {
  authority?: string
}

export type ReservationRequest = {
  toolId: bigint
  reservedFrom: Date
  reservedUntil: Date
  quantity: number
}

export type ReservationResponse = {
  id?: bigint
  userId?: bigint
  toolId?: bigint
  status?: 'RESERVED' | 'CHECKED_OUT' | 'RETURNED' | 'CANCELED'
  reservedFrom?: Date
  reservedUntil?: Date
  checkedOutAt?: Date
  returnedAt?: Date
  quantity?: number
}

export type MfaVerificationRequest = {
  code?: string
  rememberDevice?: boolean
}

export type AuthResponse = {
  token?: string
  mfaRequired?: boolean
  expiresIn?: bigint
  userId?: bigint
  refreshToken?: string
  userRole?: string
  email?: string
}

export type MfaEnableRequest = {
  code?: string
}

export type AddressRequest = {
  street: string
  city: string
  state: string
  postalCode: string
  country: string
}

export type UserProfileRequest = {
  firstname: string
  lastname: string
  email: string
  phoneNumber?: string
  addressRequest?: AddressRequest
  mfaEnabled?: boolean
}

export type UserDto = {
  id?: bigint
  firstname?: string
  lastname?: string
  email?: string
  phoneNumber?: string
  userRole?: 'MEMBER' | 'ADMIN' | 'USER' | 'ORG_ADMIN' | 'STAFF'
  addressRequest?: AddressRequest
}

export type SubscriptionRenewRequest = {
  extensionMonths?: number
}

export type MembershipRenewalResponse = {
  userId?: bigint
  newExpirationDate?: Date
}

export type OrgSubscriptionResponse = {
  organizationId?: bigint
  tier?: 'FREE' | 'PREMIUM' | 'ENTERPRISE'
  expiryDate?: Date
}

export type InviteUserRequest = {
  email: string
  role: 'MEMBER' | 'ADMIN' | 'USER' | 'ORG_ADMIN' | 'STAFF'
}

export type AcceptInviteRequest = {
  token: string
  firstname: string
  lastname: string
  email: string
  password: string
  phoneNumber: string
  address: AddressRequest
}

export type UserResponse = {
  id?: bigint
  email?: string
  userRole?: 'MEMBER' | 'ADMIN' | 'USER' | 'ORG_ADMIN' | 'STAFF'
}

export type UserRequest = {
  firstname: string
  lastname: string
  email: string
  password: string
  membershipStatus?:
    | 'ACTIVE'
    | 'EXPIRED'
    | 'SUSPENDED'
    | 'PENDING'
    | 'PAYMENT_PENDING'
    | 'TERMINATED'
    | 'PROBATION'
  phoneNumber: string
  address: AddressRequest
}

export type OrgRegistrationRequest = {
  organizationName: string
  adminFirstname: string
  adminLastname: string
  adminEmail: string
  adminPassword?: string
  subscriptionTier?: 'FREE' | 'PREMIUM' | 'ENTERPRISE'
  addressRequest: AddressRequest
}

export type OrgUserResponse = {
  organizationId?: bigint
  organizationName?: string
  adminUserId?: bigint
  adminEmail?: string
}

export type RefreshTokenRequest = {
  refreshToken?: string
}

export type PasswordResetRequest = {
  email: string
}

export type PasswordResetConfirmRequest = {
  token: string
  newPassword?: string
}

export type LoginRequest = {
  email?: string
  password?: string
}

export type MfaQrResponse = {
  qrCodeUri?: string
}

export type DeleteToolData = {
  body?: never
  path: {
    id: bigint
  }
  query?: never
  url: '/api/tools/{id}'
}

export type DeleteToolResponses = {
  /**
   * OK
   */
  200: unknown
}

export type GetToolByIdData = {
  body?: never
  path: {
    id: bigint
  }
  query?: never
  url: '/api/tools/{id}'
}

export type GetToolByIdResponses = {
  /**
   * OK
   */
  200: ToolResponse
}

export type GetToolByIdResponse = GetToolByIdResponses[keyof GetToolByIdResponses]

export type UpdateToolData = {
  body?: {
    toolRequest: ToolRequest
    files?: Array<Blob | File>
  }
  path: {
    id: bigint
  }
  query?: never
  url: '/api/tools/{id}'
}

export type UpdateToolResponses = {
  /**
   * OK
   */
  200: ToolResponse
}

export type UpdateToolResponse = UpdateToolResponses[keyof UpdateToolResponses]

export type ModifyData = {
  body: ReservationRequest
  path: {
    reservationId: bigint
  }
  query: {
    userDetails: CustomUserDetails
  }
  url: '/api/reservations/{reservationId}/modify'
}

export type ModifyResponses = {
  /**
   * OK
   */
  200: ReservationResponse
}

export type ModifyResponse = ModifyResponses[keyof ModifyResponses]

export type VerifyMfaData = {
  body: MfaVerificationRequest
  headers: {
    Authorization: string
  }
  path?: never
  query?: never
  url: '/mfa/verify'
}

export type VerifyMfaResponses = {
  /**
   * OK
   */
  200: AuthResponse
}

export type VerifyMfaResponse = VerifyMfaResponses[keyof VerifyMfaResponses]

export type EnableMfaData = {
  body: MfaEnableRequest
  path?: never
  query: {
    currentUser: CustomUserDetails
  }
  url: '/mfa/enable'
}

export type EnableMfaResponses = {
  /**
   * OK
   */
  200: {
    [key: string]: unknown
  }
}

export type EnableMfaResponse = EnableMfaResponses[keyof EnableMfaResponses]

export type GetProfileData = {
  body?: never
  path?: never
  query: {
    currentUser: CustomUserDetails
  }
  url: '/api/user/me'
}

export type GetProfileResponses = {
  /**
   * OK
   */
  200: UserDto
}

export type GetProfileResponse = GetProfileResponses[keyof GetProfileResponses]

export type UpdateProfileData = {
  body: UserProfileRequest
  path?: never
  query: {
    currentUser: CustomUserDetails
  }
  url: '/api/user/me'
}

export type UpdateProfileResponses = {
  /**
   * OK
   */
  200: UserDto
}

export type UpdateProfileResponse = UpdateProfileResponses[keyof UpdateProfileResponses]

export type GetToolsData = {
  body?: never
  path?: never
  query?: never
  url: '/api/tools'
}

export type GetToolsResponses = {
  /**
   * OK
   */
  200: Array<ToolResponse>
}

export type GetToolsResponse = GetToolsResponses[keyof GetToolsResponses]

export type CreateToolData = {
  body?: {
    userDetails?: CustomUserDetails
    toolRequest: ToolRequest
    files?: Array<Blob | File>
  }
  path?: never
  query?: never
  url: '/api/tools'
}

export type CreateToolResponses = {
  /**
   * OK
   */
  200: ToolResponse
}

export type CreateToolResponse = CreateToolResponses[keyof CreateToolResponses]

export type RenewUserData = {
  body: SubscriptionRenewRequest
  path: {
    userId: bigint
  }
  query?: never
  url: '/api/subscriptions/users/{userId}/renew'
}

export type RenewUserResponses = {
  /**
   * OK
   */
  200: MembershipRenewalResponse
}

export type RenewUserResponse = RenewUserResponses[keyof RenewUserResponses]

export type RenewOrgData = {
  body: SubscriptionRenewRequest
  path: {
    orgId: bigint
  }
  query?: never
  url: '/api/subscriptions/organizations/{orgId}/renew'
}

export type RenewOrgResponses = {
  /**
   * OK
   */
  200: OrgSubscriptionResponse
}

export type RenewOrgResponse = RenewOrgResponses[keyof RenewOrgResponses]

export type CheckoutData = {
  body?: never
  path: {
    reservationId: bigint
  }
  query?: never
  url: '/api/reservations/{reservationId}/check-out'
}

export type CheckoutResponses = {
  /**
   * OK
   */
  200: ReservationResponse
}

export type CheckoutResponse = CheckoutResponses[keyof CheckoutResponses]

export type CheckInData = {
  body?: never
  path: {
    reservationId: bigint
  }
  query?: never
  url: '/api/reservations/{reservationId}/check-in'
}

export type CheckInResponses = {
  /**
   * OK
   */
  200: ReservationResponse
}

export type CheckInResponse = CheckInResponses[keyof CheckInResponses]

export type CancelData = {
  body?: never
  path: {
    reservationId: bigint
  }
  query: {
    userDetails: CustomUserDetails
  }
  url: '/api/reservations/{reservationId}/cancel'
}

export type CancelResponses = {
  /**
   * OK
   */
  200: ReservationResponse
}

export type CancelResponse = CancelResponses[keyof CancelResponses]

export type ReserveData = {
  body: ReservationRequest
  path?: never
  query: {
    userDetails: CustomUserDetails
  }
  url: '/api/reservations/reserve'
}

export type ReserveResponses = {
  /**
   * OK
   */
  200: ReservationResponse
}

export type ReserveResponse = ReserveResponses[keyof ReserveResponses]

export type InviteData = {
  body: InviteUserRequest
  path?: never
  query: {
    admin: CustomUserDetails
  }
  url: '/api/invitations/invite'
}

export type InviteResponses = {
  /**
   * OK
   */
  200: string
}

export type InviteResponse = InviteResponses[keyof InviteResponses]

export type AcceptInviteData = {
  body: AcceptInviteRequest
  path?: never
  query?: never
  url: '/api/invitations/accept-invite'
}

export type AcceptInviteResponses = {
  /**
   * OK
   */
  200: UserResponse
}

export type AcceptInviteResponse = AcceptInviteResponses[keyof AcceptInviteResponses]

export type RegisterData = {
  body: UserRequest
  path?: never
  query?: never
  url: '/api/auth/register'
}

export type RegisterResponses = {
  /**
   * OK
   */
  200: UserResponse
}

export type RegisterResponse = RegisterResponses[keyof RegisterResponses]

export type RegisterOrgData = {
  body: OrgRegistrationRequest
  path?: never
  query?: never
  url: '/api/auth/register-org'
}

export type RegisterOrgResponses = {
  /**
   * OK
   */
  200: OrgUserResponse
}

export type RegisterOrgResponse = RegisterOrgResponses[keyof RegisterOrgResponses]

export type RefreshTokenData = {
  body: RefreshTokenRequest
  path?: never
  query?: never
  url: '/api/auth/refresh'
}

export type RefreshTokenResponses = {
  /**
   * OK
   */
  200: AuthResponse
}

export type RefreshTokenResponse = RefreshTokenResponses[keyof RefreshTokenResponses]

export type RequestPasswordResetData = {
  body: PasswordResetRequest
  path?: never
  query?: never
  url: '/api/auth/password-reset/request'
}

export type RequestPasswordResetResponses = {
  /**
   * OK
   */
  200: unknown
}

export type ConfirmPasswordResetData = {
  body: PasswordResetConfirmRequest
  path?: never
  query?: never
  url: '/api/auth/password-reset/confirm'
}

export type ConfirmPasswordResetResponses = {
  /**
   * OK
   */
  200: unknown
}

export type LogoutData = {
  body?: never
  headers: {
    Authorization: string
  }
  path?: never
  query?: never
  url: '/api/auth/logout'
}

export type LogoutResponses = {
  /**
   * OK
   */
  200: unknown
}

export type LoginData = {
  body: LoginRequest
  path?: never
  query?: never
  url: '/api/auth/login'
}

export type LoginResponses = {
  /**
   * OK
   */
  200: AuthResponse
}

export type LoginResponse = LoginResponses[keyof LoginResponses]

export type GetMfaQrCodeData = {
  body?: never
  path?: never
  query: {
    currentUser: CustomUserDetails
  }
  url: '/mfa/qr-code'
}

export type GetMfaQrCodeResponses = {
  /**
   * OK
   */
  200: MfaQrResponse
}

export type GetMfaQrCodeResponse = GetMfaQrCodeResponses[keyof GetMfaQrCodeResponses]

export type VerifyEmailData = {
  body?: never
  path?: never
  query: {
    token: string
  }
  url: '/api/auth/verify-email'
}

export type VerifyEmailResponses = {
  /**
   * OK
   */
  200: string
}

export type VerifyEmailResponse = VerifyEmailResponses[keyof VerifyEmailResponses]

export type ClientOptions = {
  baseUrl: 'http://localhost:8081' | (string & {})
}
