// This file is auto-generated by @hey-api/openapi-ts

export const ToolRequestSchema = {
  type: 'object',
  properties: {
    name: {
      type: 'string',
      minLength: 1,
    },
    description: {
      type: 'string',
    },
    category: {
      type: 'string',
      minLength: 1,
    },
    conditionStatus: {
      type: 'string',
      minLength: 1,
    },
    quantityAvailable: {
      type: 'integer',
      format: 'int32',
      minimum: 0,
    },
  },
  required: ['category', 'conditionStatus', 'name', 'quantityAvailable'],
} as const

export const ToolResponseSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'integer',
      format: 'int64',
    },
    name: {
      type: 'string',
    },
    description: {
      type: 'string',
    },
    category: {
      type: 'string',
    },
    conditionStatus: {
      type: 'string',
    },
    quantityAvailable: {
      type: 'integer',
      format: 'int32',
    },
    imageUrls: {
      type: 'array',
      items: {
        type: 'string',
      },
    },
  },
} as const

export const CustomUserDetailsSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'integer',
      format: 'int64',
    },
    password: {
      type: 'string',
    },
    role: {
      type: 'string',
      enum: ['MEMBER', 'ADMIN', 'USER', 'ORG_ADMIN', 'STAFF'],
    },
    mfaEnabled: {
      type: 'boolean',
    },
    organizationId: {
      type: 'integer',
      format: 'int64',
    },
    enabled: {
      type: 'boolean',
    },
    authorities: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/GrantedAuthority',
      },
    },
    username: {
      type: 'string',
    },
    credentialsNonExpired: {
      type: 'boolean',
    },
    accountNonLocked: {
      type: 'boolean',
    },
    accountNonExpired: {
      type: 'boolean',
    },
  },
} as const

export const GrantedAuthoritySchema = {
  type: 'object',
  properties: {
    authority: {
      type: 'string',
    },
  },
} as const

export const ReservationRequestSchema = {
  type: 'object',
  properties: {
    toolId: {
      type: 'integer',
      format: 'int64',
    },
    reservedFrom: {
      type: 'string',
      format: 'date-time',
    },
    reservedUntil: {
      type: 'string',
      format: 'date-time',
    },
    quantity: {
      type: 'integer',
      format: 'int32',
    },
  },
  required: ['quantity', 'reservedFrom', 'reservedUntil', 'toolId'],
} as const

export const ReservationResponseSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'integer',
      format: 'int64',
    },
    userId: {
      type: 'integer',
      format: 'int64',
    },
    toolId: {
      type: 'integer',
      format: 'int64',
    },
    status: {
      type: 'string',
      enum: ['RESERVED', 'CHECKED_OUT', 'RETURNED', 'CANCELED'],
    },
    reservedFrom: {
      type: 'string',
      format: 'date-time',
    },
    reservedUntil: {
      type: 'string',
      format: 'date-time',
    },
    checkedOutAt: {
      type: 'string',
      format: 'date-time',
    },
    returnedAt: {
      type: 'string',
      format: 'date-time',
    },
    quantity: {
      type: 'integer',
      format: 'int32',
    },
  },
} as const

export const MfaVerificationRequestSchema = {
  type: 'object',
  properties: {
    code: {
      type: 'string',
    },
    rememberDevice: {
      type: 'boolean',
    },
  },
} as const

export const AuthResponseSchema = {
  type: 'object',
  properties: {
    token: {
      type: 'string',
    },
    mfaRequired: {
      type: 'boolean',
    },
    expiresIn: {
      type: 'integer',
      format: 'int64',
    },
    userId: {
      type: 'integer',
      format: 'int64',
    },
    refreshToken: {
      type: 'string',
    },
    userRole: {
      type: 'string',
    },
    email: {
      type: 'string',
    },
  },
} as const

export const MfaEnableRequestSchema = {
  type: 'object',
  properties: {
    code: {
      type: 'string',
    },
  },
} as const

export const AddressRequestSchema = {
  type: 'object',
  properties: {
    street: {
      type: 'string',
      minLength: 1,
    },
    city: {
      type: 'string',
      minLength: 1,
    },
    state: {
      type: 'string',
      minLength: 1,
    },
    postalCode: {
      type: 'string',
      minLength: 1,
    },
    country: {
      type: 'string',
      minLength: 1,
    },
  },
  required: ['city', 'country', 'postalCode', 'state', 'street'],
} as const

export const UserProfileRequestSchema = {
  type: 'object',
  properties: {
    firstname: {
      type: 'string',
      minLength: 1,
    },
    lastname: {
      type: 'string',
      minLength: 1,
    },
    email: {
      type: 'string',
      minLength: 1,
    },
    phoneNumber: {
      type: 'string',
    },
    addressRequest: {
      $ref: '#/components/schemas/AddressRequest',
    },
    mfaEnabled: {
      type: 'boolean',
    },
  },
  required: ['email', 'firstname', 'lastname'],
} as const

export const UserDTOSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'integer',
      format: 'int64',
    },
    firstname: {
      type: 'string',
    },
    lastname: {
      type: 'string',
    },
    email: {
      type: 'string',
    },
    phoneNumber: {
      type: 'string',
    },
    userRole: {
      type: 'string',
      enum: ['MEMBER', 'ADMIN', 'USER', 'ORG_ADMIN', 'STAFF'],
    },
    addressRequest: {
      $ref: '#/components/schemas/AddressRequest',
    },
  },
} as const

export const SubscriptionRenewRequestSchema = {
  type: 'object',
  properties: {
    extensionMonths: {
      type: 'integer',
      format: 'int32',
      minimum: 1,
    },
  },
} as const

export const MembershipRenewalResponseSchema = {
  type: 'object',
  properties: {
    userId: {
      type: 'integer',
      format: 'int64',
    },
    newExpirationDate: {
      type: 'string',
      format: 'date',
    },
  },
} as const

export const OrgSubscriptionResponseSchema = {
  type: 'object',
  properties: {
    organizationId: {
      type: 'integer',
      format: 'int64',
    },
    tier: {
      type: 'string',
      enum: ['FREE', 'PREMIUM', 'ENTERPRISE'],
    },
    expiryDate: {
      type: 'string',
      format: 'date',
    },
  },
} as const

export const InviteUserRequestSchema = {
  type: 'object',
  properties: {
    email: {
      type: 'string',
      minLength: 1,
    },
    role: {
      type: 'string',
      enum: ['MEMBER', 'ADMIN', 'USER', 'ORG_ADMIN', 'STAFF'],
    },
  },
  required: ['email', 'role'],
} as const

export const AcceptInviteRequestSchema = {
  type: 'object',
  properties: {
    token: {
      type: 'string',
      minLength: 1,
    },
    firstname: {
      type: 'string',
      minLength: 1,
    },
    lastname: {
      type: 'string',
      minLength: 1,
    },
    email: {
      type: 'string',
      minLength: 1,
    },
    password: {
      type: 'string',
      maxLength: 2147483647,
      minLength: 8,
    },
    phoneNumber: {
      type: 'string',
      minLength: 1,
    },
    address: {
      $ref: '#/components/schemas/AddressRequest',
    },
  },
  required: ['address', 'email', 'firstname', 'lastname', 'password', 'phoneNumber', 'token'],
} as const

export const UserResponseSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'integer',
      format: 'int64',
    },
    email: {
      type: 'string',
    },
    userRole: {
      type: 'string',
      enum: ['MEMBER', 'ADMIN', 'USER', 'ORG_ADMIN', 'STAFF'],
    },
  },
} as const

export const UserRequestSchema = {
  type: 'object',
  properties: {
    firstname: {
      type: 'string',
      minLength: 1,
    },
    lastname: {
      type: 'string',
      minLength: 1,
    },
    email: {
      type: 'string',
      minLength: 1,
    },
    password: {
      type: 'string',
      maxLength: 2147483647,
      minLength: 8,
    },
    membershipStatus: {
      type: 'string',
      enum: [
        'ACTIVE',
        'EXPIRED',
        'SUSPENDED',
        'PENDING',
        'PAYMENT_PENDING',
        'TERMINATED',
        'PROBATION',
      ],
    },
    phoneNumber: {
      type: 'string',
      minLength: 1,
    },
    address: {
      $ref: '#/components/schemas/AddressRequest',
    },
  },
  required: ['address', 'email', 'firstname', 'lastname', 'password', 'phoneNumber'],
} as const

export const OrgRegistrationRequestSchema = {
  type: 'object',
  properties: {
    organizationName: {
      type: 'string',
      minLength: 1,
    },
    adminFirstname: {
      type: 'string',
      minLength: 1,
    },
    adminLastname: {
      type: 'string',
      minLength: 1,
    },
    adminEmail: {
      type: 'string',
      minLength: 1,
    },
    adminPassword: {
      type: 'string',
    },
    subscriptionTier: {
      type: 'string',
      enum: ['FREE', 'PREMIUM', 'ENTERPRISE'],
    },
    addressRequest: {
      $ref: '#/components/schemas/AddressRequest',
    },
  },
  required: ['addressRequest', 'adminEmail', 'adminFirstname', 'adminLastname', 'organizationName'],
} as const

export const OrgUserResponseSchema = {
  type: 'object',
  properties: {
    organizationId: {
      type: 'integer',
      format: 'int64',
    },
    organizationName: {
      type: 'string',
    },
    adminUserId: {
      type: 'integer',
      format: 'int64',
    },
    adminEmail: {
      type: 'string',
    },
  },
} as const

export const RefreshTokenRequestSchema = {
  type: 'object',
  properties: {
    refreshToken: {
      type: 'string',
    },
  },
} as const

export const PasswordResetRequestSchema = {
  type: 'object',
  properties: {
    email: {
      type: 'string',
      minLength: 1,
    },
  },
  required: ['email'],
} as const

export const PasswordResetConfirmRequestSchema = {
  type: 'object',
  properties: {
    token: {
      type: 'string',
      minLength: 1,
    },
    newPassword: {
      type: 'string',
    },
  },
  required: ['token'],
} as const

export const LoginRequestSchema = {
  type: 'object',
  properties: {
    email: {
      type: 'string',
    },
    password: {
      type: 'string',
    },
  },
} as const

export const MfaQrResponseSchema = {
  type: 'object',
  properties: {
    qrCodeUri: {
      type: 'string',
    },
  },
} as const
