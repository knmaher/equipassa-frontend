// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options as ClientOptions,
  type TDataShape,
  type Client,
  formDataBodySerializer,
} from './client'
import type {
  DeleteToolData,
  DeleteToolResponses,
  GetToolByIdData,
  GetToolByIdResponses,
  UpdateToolData,
  UpdateToolResponses,
  ModifyData,
  ModifyResponses,
  VerifyMfaData,
  VerifyMfaResponses,
  EnableMfaData,
  EnableMfaResponses,
  GetProfileData,
  GetProfileResponses,
  UpdateProfileData,
  UpdateProfileResponses,
  GetToolsData,
  GetToolsResponses,
  CreateToolData,
  CreateToolResponses,
  RenewUserData,
  RenewUserResponses,
  RenewOrgData,
  RenewOrgResponses,
  CheckoutData,
  CheckoutResponses,
  CheckInData,
  CheckInResponses,
  CancelData,
  CancelResponses,
  ReserveData,
  ReserveResponses,
  InviteData,
  InviteResponses,
  AcceptInviteData,
  AcceptInviteResponses,
  RegisterData,
  RegisterResponses,
  RegisterOrgData,
  RegisterOrgResponses,
  RefreshTokenData,
  RefreshTokenResponses,
  RequestPasswordResetData,
  RequestPasswordResetResponses,
  ConfirmPasswordResetData,
  ConfirmPasswordResetResponses,
  LogoutData,
  LogoutResponses,
  LoginData,
  LoginResponses,
  GetMfaQrCodeData,
  GetMfaQrCodeResponses,
  VerifyEmailData,
  VerifyEmailResponses,
} from './types.gen'
import { client as _heyApiClient } from './client.gen'
import {
  getToolByIdResponseTransformer,
  updateToolResponseTransformer,
  modifyResponseTransformer,
  verifyMfaResponseTransformer,
  getProfileResponseTransformer,
  updateProfileResponseTransformer,
  getToolsResponseTransformer,
  createToolResponseTransformer,
  renewUserResponseTransformer,
  renewOrgResponseTransformer,
  checkoutResponseTransformer,
  checkInResponseTransformer,
  cancelResponseTransformer,
  reserveResponseTransformer,
  acceptInviteResponseTransformer,
  registerResponseTransformer,
  registerOrgResponseTransformer,
  refreshTokenResponseTransformer,
  loginResponseTransformer,
} from './transformers.gen'

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>
}

export const deleteTool = <ThrowOnError extends boolean = false>(
  options: Options<DeleteToolData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<DeleteToolResponses, unknown, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/tools/{id}',
    ...options,
  })
}

export const getToolById = <ThrowOnError extends boolean = false>(
  options: Options<GetToolByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<GetToolByIdResponses, unknown, ThrowOnError>({
    responseTransformer: getToolByIdResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/tools/{id}',
    ...options,
  })
}

export const updateTool = <ThrowOnError extends boolean = false>(
  options: Options<UpdateToolData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<UpdateToolResponses, unknown, ThrowOnError>({
    ...formDataBodySerializer,
    responseTransformer: updateToolResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/tools/{id}',
    ...options,
    headers: {
      'Content-Type': null,
      ...options.headers,
    },
  })
}

export const modify = <ThrowOnError extends boolean = false>(
  options: Options<ModifyData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<ModifyResponses, unknown, ThrowOnError>({
    responseTransformer: modifyResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/reservations/{reservationId}/modify',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

export const verifyMfa = <ThrowOnError extends boolean = false>(
  options: Options<VerifyMfaData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<VerifyMfaResponses, unknown, ThrowOnError>({
    responseTransformer: verifyMfaResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/mfa/verify',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

export const enableMfa = <ThrowOnError extends boolean = false>(
  options: Options<EnableMfaData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<EnableMfaResponses, unknown, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/mfa/enable',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

export const getProfile = <ThrowOnError extends boolean = false>(
  options: Options<GetProfileData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<GetProfileResponses, unknown, ThrowOnError>({
    responseTransformer: getProfileResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/user/me',
    ...options,
  })
}

export const updateProfile = <ThrowOnError extends boolean = false>(
  options: Options<UpdateProfileData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<UpdateProfileResponses, unknown, ThrowOnError>({
    responseTransformer: updateProfileResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/user/me',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

export const getTools = <ThrowOnError extends boolean = false>(
  options?: Options<GetToolsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<GetToolsResponses, unknown, ThrowOnError>({
    responseTransformer: getToolsResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/tools',
    ...options,
  })
}

export const createTool = <ThrowOnError extends boolean = false>(
  options?: Options<CreateToolData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<CreateToolResponses, unknown, ThrowOnError>({
    ...formDataBodySerializer,
    responseTransformer: createToolResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/tools',
    ...options,
    headers: {
      'Content-Type': null,
      ...options?.headers,
    },
  })
}

export const renewUser = <ThrowOnError extends boolean = false>(
  options: Options<RenewUserData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<RenewUserResponses, unknown, ThrowOnError>({
    responseTransformer: renewUserResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/subscriptions/users/{userId}/renew',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

export const renewOrg = <ThrowOnError extends boolean = false>(
  options: Options<RenewOrgData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<RenewOrgResponses, unknown, ThrowOnError>({
    responseTransformer: renewOrgResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/subscriptions/organizations/{orgId}/renew',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

export const checkout = <ThrowOnError extends boolean = false>(
  options: Options<CheckoutData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<CheckoutResponses, unknown, ThrowOnError>({
    responseTransformer: checkoutResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/reservations/{reservationId}/check-out',
    ...options,
  })
}

export const checkIn = <ThrowOnError extends boolean = false>(
  options: Options<CheckInData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<CheckInResponses, unknown, ThrowOnError>({
    responseTransformer: checkInResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/reservations/{reservationId}/check-in',
    ...options,
  })
}

export const cancel = <ThrowOnError extends boolean = false>(
  options: Options<CancelData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<CancelResponses, unknown, ThrowOnError>({
    responseTransformer: cancelResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/reservations/{reservationId}/cancel',
    ...options,
  })
}

export const reserve = <ThrowOnError extends boolean = false>(
  options: Options<ReserveData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<ReserveResponses, unknown, ThrowOnError>({
    responseTransformer: reserveResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/reservations/reserve',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

export const invite = <ThrowOnError extends boolean = false>(
  options: Options<InviteData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<InviteResponses, unknown, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/invitations/invite',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

export const acceptInvite = <ThrowOnError extends boolean = false>(
  options: Options<AcceptInviteData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<AcceptInviteResponses, unknown, ThrowOnError>({
    responseTransformer: acceptInviteResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/invitations/accept-invite',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

export const register = <ThrowOnError extends boolean = false>(
  options: Options<RegisterData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<RegisterResponses, unknown, ThrowOnError>({
    responseTransformer: registerResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/auth/register',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

export const registerOrg = <ThrowOnError extends boolean = false>(
  options: Options<RegisterOrgData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<RegisterOrgResponses, unknown, ThrowOnError>({
    responseTransformer: registerOrgResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/auth/register-org',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

export const refreshToken = <ThrowOnError extends boolean = false>(
  options: Options<RefreshTokenData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<RefreshTokenResponses, unknown, ThrowOnError>({
    responseTransformer: refreshTokenResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/auth/refresh',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

export const requestPasswordReset = <ThrowOnError extends boolean = false>(
  options: Options<RequestPasswordResetData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    RequestPasswordResetResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/auth/password-reset/request',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

export const confirmPasswordReset = <ThrowOnError extends boolean = false>(
  options: Options<ConfirmPasswordResetData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    ConfirmPasswordResetResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/auth/password-reset/confirm',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

export const logout = <ThrowOnError extends boolean = false>(
  options: Options<LogoutData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<LogoutResponses, unknown, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/auth/logout',
    ...options,
  })
}

export const login = <ThrowOnError extends boolean = false>(
  options: Options<LoginData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<LoginResponses, unknown, ThrowOnError>({
    responseTransformer: loginResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/auth/login',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

export const getMfaQrCode = <ThrowOnError extends boolean = false>(
  options: Options<GetMfaQrCodeData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<GetMfaQrCodeResponses, unknown, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/mfa/qr-code',
    ...options,
  })
}

export const verifyEmail = <ThrowOnError extends boolean = false>(
  options: Options<VerifyEmailData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<VerifyEmailResponses, unknown, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/auth/verify-email',
    ...options,
  })
}
